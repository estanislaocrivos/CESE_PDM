
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c8  080032c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003340  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003340  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008053  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001505  00000000  00000000  000280f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  000295f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00029ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016579  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000869d  00000000  00000000  000408b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008732f  00000000  00000000  00048f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002430  00000000  00000000  000d02d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003170 	.word	0x08003170

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003170 	.word	0x08003170

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delayInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Funcion para inicializar el contador de duracion "duration".
void delayInit( delay_t * delay, tick_t duration )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	assert(delay != NULL);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d105      	bne.n	80005a0 <delayInit+0x1c>
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <delayInit+0x44>)
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <delayInit+0x48>)
 8000598:	214f      	movs	r1, #79	; 0x4f
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <delayInit+0x4c>)
 800059c:	f001 fdc4 	bl	8002128 <__assert_func>
	assert(duration > 0);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d105      	bne.n	80005b2 <delayInit+0x2e>
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <delayInit+0x50>)
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <delayInit+0x48>)
 80005aa:	2150      	movs	r1, #80	; 0x50
 80005ac:	4808      	ldr	r0, [pc, #32]	; (80005d0 <delayInit+0x4c>)
 80005ae:	f001 fdbb 	bl	8002128 <__assert_func>

	delay->duration = duration;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	721a      	strb	r2, [r3, #8]
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08003188 	.word	0x08003188
 80005cc:	080031bc 	.word	0x080031bc
 80005d0:	08003198 	.word	0x08003198
 80005d4:	080031ac 	.word	0x080031ac

080005d8 <delayRead>:

// Funcion para leer el estado del contador:
// Si llego al objetivo, finalizarlo y devolver true.
// Si no se encuentra inicializado, iniciarlo y devolver false.
bool_t delayRead( delay_t * delay )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	assert(delay != NULL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d105      	bne.n	80005f2 <delayRead+0x1a>
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <delayRead+0x64>)
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <delayRead+0x68>)
 80005ea:	215b      	movs	r1, #91	; 0x5b
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <delayRead+0x6c>)
 80005ee:	f001 fd9b 	bl	8002128 <__assert_func>

	if(delay->running == false)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a1b      	ldrb	r3, [r3, #8]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d008      	beq.n	8000612 <delayRead+0x3a>
	{
		// Inicia el contador
		delay->running = true;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 8000606:	f000 fb8b 	bl	8000d20 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e00f      	b.n	8000632 <delayRead+0x5a>
	}
	else
	{
		// Si ya se cumplio el tiempo, anula el contador
		tick_t actual_time = HAL_GetTick();
 8000612:	f000 fb85 	bl	8000d20 <HAL_GetTick>
 8000616:	60f8      	str	r0, [r7, #12]
		if (actual_time - delay->startTime >= delay->duration)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	1ad2      	subs	r2, r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d304      	bcc.n	8000632 <delayRead+0x5a>
		{
			delay->running = false;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	721a      	strb	r2, [r3, #8]
			return true;
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <delayRead+0x5c>
		}
	}
	return false;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08003188 	.word	0x08003188
 8000640:	080031c8 	.word	0x080031c8
 8000644:	08003198 	.word	0x08003198

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
	 delay_t LED3_Delay;

	 /*
	  * Defino 4 duraciones para cada LED
	  */
	 tick_t LED1_Duration = LED1_DUR;
 800064e:	2332      	movs	r3, #50	; 0x32
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
	 tick_t LED2_Duration = LED2_DUR;
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
	 tick_t LED3_Duration = LED3_DUR;
 8000656:	23c8      	movs	r3, #200	; 0xc8
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fafb 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f83b 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8cf 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f8a3 	bl	80007b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	/*
    * Inicializo los 4 contadores
    */
    delayInit(&LED1_Delay, LED1_Duration);
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff87 	bl	8000584 <delayInit>
    delayInit(&LED2_Delay, LED2_Duration);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff81 	bl	8000584 <delayInit>
    delayInit(&LED3_Delay, LED3_Duration);
 8000682:	463b      	mov	r3, r7
 8000684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff7c 	bl	8000584 <delayInit>
  {
	  /*
	   * Verifico si el contador de cada LED llego al objetivo. Si llego, reinicia el contador, sino, sigue esperando y chequeando en cada loop.
	   */

	  if(delayRead(&LED1_Delay) == true)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffa1 	bl	80005d8 <delayRead>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d003      	beq.n	80006a4 <main+0x5c>
	  {
		  HAL_GPIO_TogglePin(GPIOB, PIN_1);
 800069c:	2110      	movs	r1, #16
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <main+0x8c>)
 80006a0:	f000 fdcd 	bl	800123e <HAL_GPIO_TogglePin>
	  }

	  if(delayRead(&LED2_Delay) == true)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff95 	bl	80005d8 <delayRead>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <main+0x74>
	  {
		  HAL_GPIO_TogglePin(GPIOB, PIN_2);
 80006b4:	2120      	movs	r1, #32
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <main+0x8c>)
 80006b8:	f000 fdc1 	bl	800123e <HAL_GPIO_TogglePin>
	  }

	  if(delayRead(&LED3_Delay) == true)
 80006bc:	463b      	mov	r3, r7
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff8a 	bl	80005d8 <delayRead>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0e0      	beq.n	800068c <main+0x44>
	  {
		  HAL_GPIO_TogglePin(GPIOB, PIN_3);
 80006ca:	2108      	movs	r1, #8
 80006cc:	4801      	ldr	r0, [pc, #4]	; (80006d4 <main+0x8c>)
 80006ce:	f000 fdb6 	bl	800123e <HAL_GPIO_TogglePin>
	  if(delayRead(&LED1_Delay) == true)
 80006d2:	e7db      	b.n	800068c <main+0x44>
 80006d4:	40020400 	.word	0x40020400

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd78 	bl	80021dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd4>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fd86 	bl	8001274 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 f8cf 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ffe8 	bl	8001764 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 f8b9 	bl	8000910 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f001 f9dc 	bl	8001ba4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f88d 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xfc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <MX_GPIO_Init+0xfc>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_GPIO_Init+0x100>)
 8000892:	f000 fcbb 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2138      	movs	r1, #56	; 0x38
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <MX_GPIO_Init+0x104>)
 800089c:	f000 fcb6 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_GPIO_Init+0x108>)
 80008b8:	f000 fb24 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80008bc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_GPIO_Init+0x100>)
 80008d6:	f000 fb15 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008da:	2338      	movs	r3, #56	; 0x38
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x104>)
 80008f2:	f000 fb07 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f000 fa9e 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 fa8f 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f956 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return 1;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_kill>:

int _kill(int pid, int sig)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a6a:	f001 fb7b 	bl	8002164 <__errno>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2216      	movs	r2, #22
 8000a72:	601a      	str	r2, [r3, #0]
  return -1;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_exit>:

void _exit (int status)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ffe7 	bl	8000a60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a92:	e7fe      	b.n	8000a92 <_exit+0x12>

08000a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
  }
  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f001 fae0 	bl	8002164 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20018000 	.word	0x20018000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	200000d0 	.word	0x200000d0
 8000bd8:	200000e8 	.word	0x200000e8

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f001 fab1 	bl	8002194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fd09 	bl	8000648 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c44:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c4c:	200000e8 	.word	0x200000e8

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f90d 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe48 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f917 	bl	8000eea <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f000 f8ed 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000d4 	.word	0x200000d4

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200000d4 	.word	0x200000d4

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e159      	b.n	80011d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8148 	bne.w	80011ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a2 	beq.w	80011ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b54      	ldr	r3, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x202>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1fe>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x300>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x304>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f aea2 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43d9      	mvns	r1, r3
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	400b      	ands	r3, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e267      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e242      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6c      	ldr	r2, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a68      	ldr	r2, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcf8 	bl	8000d20 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fcf4 	bl	8000d20 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e207      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fce4 	bl	8000d20 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fce0 	bl	8000d20 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1f3      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c7      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4937      	ldr	r1, [pc, #220]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc99 	bl	8000d20 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc95 	bl	8000d20 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a8      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4925      	ldr	r1, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc78 	bl	8000d20 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc74 	bl	8000d20 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e187      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d036      	beq.n	80014cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d016      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fc58 	bl	8000d20 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc54 	bl	8000d20 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e167      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
 8001492:	e01b      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fc41 	bl	8000d20 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e00e      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc3d 	bl	8000d20 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d907      	bls.n	80014c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e150      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	42470000 	.word	0x42470000
 80014bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ea      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8097 	beq.w	8001608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d118      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff fbfd 	bl	8000d20 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152a:	f7ff fbf9 	bl	8000d20 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e10c      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x2ea>
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x30c>
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a5e      	ldr	r2, [pc, #376]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0304 	bic.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d015      	beq.n	80015cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fbbe 	bl	8000d20 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fbba 	bl	8000d20 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0cb      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0ee      	beq.n	80015a8 <HAL_RCC_OscConfig+0x334>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fba8 	bl	8000d20 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fba4 	bl	8000d20 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0b5      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a1 	beq.w	8001754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d05c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d141      	bne.n	80016aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb78 	bl	8000d20 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb74 	bl	8000d20 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e087      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	491b      	ldr	r1, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb4d 	bl	8000d20 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb49 	bl	8000d20 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e05c      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x416>
 80016a8:	e054      	b.n	8001754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb36 	bl	8000d20 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb32 	bl	8000d20 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e045      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
 80016d6:	e03d      	b.n	8001754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e038      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d028      	beq.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d121      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001728:	4293      	cmp	r3, r2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	3b01      	subs	r3, #1
 800173a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa64 	bl	8000d20 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa60 	bl	8000d20 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9c4 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	080031d4 	.word	0x080031d4
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b094      	sub	sp, #80	; 0x50
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80e1 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0db      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001968:	e0db      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800196e:	e0d8      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
 800199e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019a2:	4622      	mov	r2, r4
 80019a4:	462b      	mov	r3, r5
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b4:	0150      	lsls	r0, r2, #5
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4621      	mov	r1, r4
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	6139      	str	r1, [r7, #16]
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d4:	4659      	mov	r1, fp
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019de:	4651      	mov	r1, sl
 80019e0:	018a      	lsls	r2, r1, #6
 80019e2:	4651      	mov	r1, sl
 80019e4:	ebb2 0801 	subs.w	r8, r2, r1
 80019e8:	4659      	mov	r1, fp
 80019ea:	eb63 0901 	sbc.w	r9, r3, r1
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a02:	4690      	mov	r8, r2
 8001a04:	4699      	mov	r9, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	eb18 0303 	adds.w	r3, r8, r3
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	462b      	mov	r3, r5
 8001a10:	eb49 0303 	adc.w	r3, r9, r3
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a22:	4629      	mov	r1, r5
 8001a24:	024b      	lsls	r3, r1, #9
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	024a      	lsls	r2, r1, #9
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	2200      	movs	r2, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a40:	f7fe fc1e 	bl	8000280 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	e058      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a68:	4642      	mov	r2, r8
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4641      	mov	r1, r8
 8001a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a86:	4649      	mov	r1, r9
 8001a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	00eb      	lsls	r3, r5, #3
 8001ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	18e3      	adds	r3, r4, r3
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	eb45 0303 	adc.w	r3, r5, r3
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	028b      	lsls	r3, r1, #10
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	028a      	lsls	r2, r1, #10
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	2200      	movs	r2, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	f7fe fbc4 	bl	8000280 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	080031e4 	.word	0x080031e4

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	080031e4 	.word	0x080031e4

08001ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e03f      	b.n	8001c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fece 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f829 	bl	8001c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b0c0      	sub	sp, #256	; 0x100
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	ea40 0301 	orr.w	r3, r0, r1
 8001c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c98:	f021 010c 	bic.w	r1, r1, #12
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cba:	6999      	ldr	r1, [r3, #24]
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	ea40 0301 	orr.w	r3, r0, r1
 8001cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b8f      	ldr	r3, [pc, #572]	; (8001f0c <UART_SetConfig+0x2cc>)
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d005      	beq.n	8001ce0 <UART_SetConfig+0xa0>
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b8d      	ldr	r3, [pc, #564]	; (8001f10 <UART_SetConfig+0x2d0>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d104      	bne.n	8001cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ce0:	f7ff ff4c 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8001ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ce8:	e003      	b.n	8001cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cea:	f7ff ff33 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8001cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfc:	f040 810c 	bne.w	8001f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d04:	2200      	movs	r2, #0
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d12:	4622      	mov	r2, r4
 8001d14:	462b      	mov	r3, r5
 8001d16:	1891      	adds	r1, r2, r2
 8001d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d1a:	415b      	adcs	r3, r3
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d22:	4621      	mov	r1, r4
 8001d24:	eb12 0801 	adds.w	r8, r2, r1
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb43 0901 	adc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d50:	462b      	mov	r3, r5
 8001d52:	eb49 0303 	adc.w	r3, r9, r3
 8001d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d6e:	460b      	mov	r3, r1
 8001d70:	18db      	adds	r3, r3, r3
 8001d72:	653b      	str	r3, [r7, #80]	; 0x50
 8001d74:	4613      	mov	r3, r2
 8001d76:	eb42 0303 	adc.w	r3, r2, r3
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d84:	f7fe fa7c 	bl	8000280 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <UART_SetConfig+0x2d4>)
 8001d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	011c      	lsls	r4, r3, #4
 8001d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	1891      	adds	r1, r2, r2
 8001dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8001db0:	415b      	adcs	r3, r3
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001db8:	4641      	mov	r1, r8
 8001dba:	eb12 0a01 	adds.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dd8:	4692      	mov	sl, r2
 8001dda:	469b      	mov	fp, r3
 8001ddc:	4643      	mov	r3, r8
 8001dde:	eb1a 0303 	adds.w	r3, sl, r3
 8001de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001de6:	464b      	mov	r3, r9
 8001de8:	eb4b 0303 	adc.w	r3, fp, r3
 8001dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e04:	460b      	mov	r3, r1
 8001e06:	18db      	adds	r3, r3, r3
 8001e08:	643b      	str	r3, [r7, #64]	; 0x40
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	eb42 0303 	adc.w	r3, r2, r3
 8001e10:	647b      	str	r3, [r7, #68]	; 0x44
 8001e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e1a:	f7fe fa31 	bl	8000280 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <UART_SetConfig+0x2d4>)
 8001e26:	fba3 2301 	umull	r2, r3, r3, r1
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2264      	movs	r2, #100	; 0x64
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <UART_SetConfig+0x2d4>)
 8001e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e48:	441c      	add	r4, r3
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1891      	adds	r1, r2, r2
 8001e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e64:	415b      	adcs	r3, r3
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	1851      	adds	r1, r2, r1
 8001e70:	6339      	str	r1, [r7, #48]	; 0x30
 8001e72:	4649      	mov	r1, r9
 8001e74:	414b      	adcs	r3, r1
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e84:	4659      	mov	r1, fp
 8001e86:	00cb      	lsls	r3, r1, #3
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e8e:	4651      	mov	r1, sl
 8001e90:	00ca      	lsls	r2, r1, #3
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	4642      	mov	r2, r8
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	eb42 0303 	adc.w	r3, r2, r3
 8001ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001ed6:	f7fe f9d3 	bl	8000280 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <UART_SetConfig+0x2d4>)
 8001ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	2164      	movs	r1, #100	; 0x64
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	3332      	adds	r3, #50	; 0x32
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <UART_SetConfig+0x2d4>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4422      	add	r2, r4
 8001f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f08:	e105      	b.n	8002116 <UART_SetConfig+0x4d6>
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	1891      	adds	r1, r2, r2
 8001f30:	6239      	str	r1, [r7, #32]
 8001f32:	415b      	adcs	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	1854      	adds	r4, r2, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	eb43 0501 	adc.w	r5, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f60:	464b      	mov	r3, r9
 8001f62:	eb45 0303 	adc.w	r3, r5, r3
 8001f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f86:	4629      	mov	r1, r5
 8001f88:	008b      	lsls	r3, r1, #2
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f90:	4621      	mov	r1, r4
 8001f92:	008a      	lsls	r2, r1, #2
 8001f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f98:	f7fe f972 	bl	8000280 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4b60      	ldr	r3, [pc, #384]	; (8002124 <UART_SetConfig+0x4e4>)
 8001fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	011c      	lsls	r4, r3, #4
 8001faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	1891      	adds	r1, r2, r2
 8001fc2:	61b9      	str	r1, [r7, #24]
 8001fc4:	415b      	adcs	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	4641      	mov	r1, r8
 8001fce:	1851      	adds	r1, r2, r1
 8001fd0:	6139      	str	r1, [r7, #16]
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	414b      	adcs	r3, r1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	00cb      	lsls	r3, r1, #3
 8001fe8:	4651      	mov	r1, sl
 8001fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fee:	4651      	mov	r1, sl
 8001ff0:	00ca      	lsls	r2, r1, #3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	189b      	adds	r3, r3, r2
 8001ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002000:	464b      	mov	r3, r9
 8002002:	460a      	mov	r2, r1
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	67bb      	str	r3, [r7, #120]	; 0x78
 8002016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002024:	4649      	mov	r1, r9
 8002026:	008b      	lsls	r3, r1, #2
 8002028:	4641      	mov	r1, r8
 800202a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800202e:	4641      	mov	r1, r8
 8002030:	008a      	lsls	r2, r1, #2
 8002032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002036:	f7fe f923 	bl	8000280 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <UART_SetConfig+0x4e4>)
 8002040:	fba3 1302 	umull	r1, r3, r3, r2
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	2164      	movs	r1, #100	; 0x64
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	3332      	adds	r3, #50	; 0x32
 8002052:	4a34      	ldr	r2, [pc, #208]	; (8002124 <UART_SetConfig+0x4e4>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205e:	441c      	add	r4, r3
 8002060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002064:	2200      	movs	r2, #0
 8002066:	673b      	str	r3, [r7, #112]	; 0x70
 8002068:	677a      	str	r2, [r7, #116]	; 0x74
 800206a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800206e:	4642      	mov	r2, r8
 8002070:	464b      	mov	r3, r9
 8002072:	1891      	adds	r1, r2, r2
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	415b      	adcs	r3, r3
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207e:	4641      	mov	r1, r8
 8002080:	1851      	adds	r1, r2, r1
 8002082:	6039      	str	r1, [r7, #0]
 8002084:	4649      	mov	r1, r9
 8002086:	414b      	adcs	r3, r1
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002096:	4659      	mov	r1, fp
 8002098:	00cb      	lsls	r3, r1, #3
 800209a:	4651      	mov	r1, sl
 800209c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a0:	4651      	mov	r1, sl
 80020a2:	00ca      	lsls	r2, r1, #3
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	4642      	mov	r2, r8
 80020ac:	189b      	adds	r3, r3, r2
 80020ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80020b0:	464b      	mov	r3, r9
 80020b2:	460a      	mov	r2, r1
 80020b4:	eb42 0303 	adc.w	r3, r2, r3
 80020b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	663b      	str	r3, [r7, #96]	; 0x60
 80020c4:	667a      	str	r2, [r7, #100]	; 0x64
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80020d2:	4649      	mov	r1, r9
 80020d4:	008b      	lsls	r3, r1, #2
 80020d6:	4641      	mov	r1, r8
 80020d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020dc:	4641      	mov	r1, r8
 80020de:	008a      	lsls	r2, r1, #2
 80020e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020e4:	f7fe f8cc 	bl	8000280 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <UART_SetConfig+0x4e4>)
 80020ee:	fba3 1302 	umull	r1, r3, r3, r2
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2164      	movs	r1, #100	; 0x64
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <UART_SetConfig+0x4e4>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4422      	add	r2, r4
 8002114:	609a      	str	r2, [r3, #8]
}
 8002116:	bf00      	nop
 8002118:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	51eb851f 	.word	0x51eb851f

08002128 <__assert_func>:
 8002128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800212a:	4614      	mov	r4, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <__assert_func+0x2c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4605      	mov	r5, r0
 8002134:	68d8      	ldr	r0, [r3, #12]
 8002136:	b14c      	cbz	r4, 800214c <__assert_func+0x24>
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <__assert_func+0x30>)
 800213a:	9100      	str	r1, [sp, #0]
 800213c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002140:	4906      	ldr	r1, [pc, #24]	; (800215c <__assert_func+0x34>)
 8002142:	462b      	mov	r3, r5
 8002144:	f000 f814 	bl	8002170 <fiprintf>
 8002148:	f000 fbfe 	bl	8002948 <abort>
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__assert_func+0x38>)
 800214e:	461c      	mov	r4, r3
 8002150:	e7f3      	b.n	800213a <__assert_func+0x12>
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c
 8002158:	080031ec 	.word	0x080031ec
 800215c:	080031f9 	.word	0x080031f9
 8002160:	08003227 	.word	0x08003227

08002164 <__errno>:
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <__errno+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <fiprintf>:
 8002170:	b40e      	push	{r1, r2, r3}
 8002172:	b503      	push	{r0, r1, lr}
 8002174:	4601      	mov	r1, r0
 8002176:	ab03      	add	r3, sp, #12
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <fiprintf+0x20>)
 800217a:	f853 2b04 	ldr.w	r2, [r3], #4
 800217e:	6800      	ldr	r0, [r0, #0]
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	f000 f85d 	bl	8002240 <_vfiprintf_r>
 8002186:	b002      	add	sp, #8
 8002188:	f85d eb04 	ldr.w	lr, [sp], #4
 800218c:	b003      	add	sp, #12
 800218e:	4770      	bx	lr
 8002190:	2000000c 	.word	0x2000000c

08002194 <__libc_init_array>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4d0d      	ldr	r5, [pc, #52]	; (80021cc <__libc_init_array+0x38>)
 8002198:	4c0d      	ldr	r4, [pc, #52]	; (80021d0 <__libc_init_array+0x3c>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	2600      	movs	r6, #0
 80021a0:	42a6      	cmp	r6, r4
 80021a2:	d109      	bne.n	80021b8 <__libc_init_array+0x24>
 80021a4:	4d0b      	ldr	r5, [pc, #44]	; (80021d4 <__libc_init_array+0x40>)
 80021a6:	4c0c      	ldr	r4, [pc, #48]	; (80021d8 <__libc_init_array+0x44>)
 80021a8:	f000 ffe2 	bl	8003170 <_init>
 80021ac:	1b64      	subs	r4, r4, r5
 80021ae:	10a4      	asrs	r4, r4, #2
 80021b0:	2600      	movs	r6, #0
 80021b2:	42a6      	cmp	r6, r4
 80021b4:	d105      	bne.n	80021c2 <__libc_init_array+0x2e>
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021bc:	4798      	blx	r3
 80021be:	3601      	adds	r6, #1
 80021c0:	e7ee      	b.n	80021a0 <__libc_init_array+0xc>
 80021c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c6:	4798      	blx	r3
 80021c8:	3601      	adds	r6, #1
 80021ca:	e7f2      	b.n	80021b2 <__libc_init_array+0x1e>
 80021cc:	080032c8 	.word	0x080032c8
 80021d0:	080032c8 	.word	0x080032c8
 80021d4:	080032c8 	.word	0x080032c8
 80021d8:	080032cc 	.word	0x080032cc

080021dc <memset>:
 80021dc:	4402      	add	r2, r0
 80021de:	4603      	mov	r3, r0
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d100      	bne.n	80021e6 <memset+0xa>
 80021e4:	4770      	bx	lr
 80021e6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ea:	e7f9      	b.n	80021e0 <memset+0x4>

080021ec <__sfputc_r>:
 80021ec:	6893      	ldr	r3, [r2, #8]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	b410      	push	{r4}
 80021f4:	6093      	str	r3, [r2, #8]
 80021f6:	da08      	bge.n	800220a <__sfputc_r+0x1e>
 80021f8:	6994      	ldr	r4, [r2, #24]
 80021fa:	42a3      	cmp	r3, r4
 80021fc:	db01      	blt.n	8002202 <__sfputc_r+0x16>
 80021fe:	290a      	cmp	r1, #10
 8002200:	d103      	bne.n	800220a <__sfputc_r+0x1e>
 8002202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002206:	f000 badf 	b.w	80027c8 <__swbuf_r>
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	1c58      	adds	r0, r3, #1
 800220e:	6010      	str	r0, [r2, #0]
 8002210:	7019      	strb	r1, [r3, #0]
 8002212:	4608      	mov	r0, r1
 8002214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002218:	4770      	bx	lr

0800221a <__sfputs_r>:
 800221a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221c:	4606      	mov	r6, r0
 800221e:	460f      	mov	r7, r1
 8002220:	4614      	mov	r4, r2
 8002222:	18d5      	adds	r5, r2, r3
 8002224:	42ac      	cmp	r4, r5
 8002226:	d101      	bne.n	800222c <__sfputs_r+0x12>
 8002228:	2000      	movs	r0, #0
 800222a:	e007      	b.n	800223c <__sfputs_r+0x22>
 800222c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002230:	463a      	mov	r2, r7
 8002232:	4630      	mov	r0, r6
 8002234:	f7ff ffda 	bl	80021ec <__sfputc_r>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d1f3      	bne.n	8002224 <__sfputs_r+0xa>
 800223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002240 <_vfiprintf_r>:
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	460d      	mov	r5, r1
 8002246:	b09d      	sub	sp, #116	; 0x74
 8002248:	4614      	mov	r4, r2
 800224a:	4698      	mov	r8, r3
 800224c:	4606      	mov	r6, r0
 800224e:	b118      	cbz	r0, 8002258 <_vfiprintf_r+0x18>
 8002250:	6983      	ldr	r3, [r0, #24]
 8002252:	b90b      	cbnz	r3, 8002258 <_vfiprintf_r+0x18>
 8002254:	f000 fc9a 	bl	8002b8c <__sinit>
 8002258:	4b89      	ldr	r3, [pc, #548]	; (8002480 <_vfiprintf_r+0x240>)
 800225a:	429d      	cmp	r5, r3
 800225c:	d11b      	bne.n	8002296 <_vfiprintf_r+0x56>
 800225e:	6875      	ldr	r5, [r6, #4]
 8002260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002262:	07d9      	lsls	r1, r3, #31
 8002264:	d405      	bmi.n	8002272 <_vfiprintf_r+0x32>
 8002266:	89ab      	ldrh	r3, [r5, #12]
 8002268:	059a      	lsls	r2, r3, #22
 800226a:	d402      	bmi.n	8002272 <_vfiprintf_r+0x32>
 800226c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800226e:	f000 fd2b 	bl	8002cc8 <__retarget_lock_acquire_recursive>
 8002272:	89ab      	ldrh	r3, [r5, #12]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	d501      	bpl.n	800227c <_vfiprintf_r+0x3c>
 8002278:	692b      	ldr	r3, [r5, #16]
 800227a:	b9eb      	cbnz	r3, 80022b8 <_vfiprintf_r+0x78>
 800227c:	4629      	mov	r1, r5
 800227e:	4630      	mov	r0, r6
 8002280:	f000 faf4 	bl	800286c <__swsetup_r>
 8002284:	b1c0      	cbz	r0, 80022b8 <_vfiprintf_r+0x78>
 8002286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002288:	07dc      	lsls	r4, r3, #31
 800228a:	d50e      	bpl.n	80022aa <_vfiprintf_r+0x6a>
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002290:	b01d      	add	sp, #116	; 0x74
 8002292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002296:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <_vfiprintf_r+0x244>)
 8002298:	429d      	cmp	r5, r3
 800229a:	d101      	bne.n	80022a0 <_vfiprintf_r+0x60>
 800229c:	68b5      	ldr	r5, [r6, #8]
 800229e:	e7df      	b.n	8002260 <_vfiprintf_r+0x20>
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <_vfiprintf_r+0x248>)
 80022a2:	429d      	cmp	r5, r3
 80022a4:	bf08      	it	eq
 80022a6:	68f5      	ldreq	r5, [r6, #12]
 80022a8:	e7da      	b.n	8002260 <_vfiprintf_r+0x20>
 80022aa:	89ab      	ldrh	r3, [r5, #12]
 80022ac:	0598      	lsls	r0, r3, #22
 80022ae:	d4ed      	bmi.n	800228c <_vfiprintf_r+0x4c>
 80022b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022b2:	f000 fd0a 	bl	8002cca <__retarget_lock_release_recursive>
 80022b6:	e7e9      	b.n	800228c <_vfiprintf_r+0x4c>
 80022b8:	2300      	movs	r3, #0
 80022ba:	9309      	str	r3, [sp, #36]	; 0x24
 80022bc:	2320      	movs	r3, #32
 80022be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80022c6:	2330      	movs	r3, #48	; 0x30
 80022c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800248c <_vfiprintf_r+0x24c>
 80022cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022d0:	f04f 0901 	mov.w	r9, #1
 80022d4:	4623      	mov	r3, r4
 80022d6:	469a      	mov	sl, r3
 80022d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022dc:	b10a      	cbz	r2, 80022e2 <_vfiprintf_r+0xa2>
 80022de:	2a25      	cmp	r2, #37	; 0x25
 80022e0:	d1f9      	bne.n	80022d6 <_vfiprintf_r+0x96>
 80022e2:	ebba 0b04 	subs.w	fp, sl, r4
 80022e6:	d00b      	beq.n	8002300 <_vfiprintf_r+0xc0>
 80022e8:	465b      	mov	r3, fp
 80022ea:	4622      	mov	r2, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	4630      	mov	r0, r6
 80022f0:	f7ff ff93 	bl	800221a <__sfputs_r>
 80022f4:	3001      	adds	r0, #1
 80022f6:	f000 80aa 	beq.w	800244e <_vfiprintf_r+0x20e>
 80022fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022fc:	445a      	add	r2, fp
 80022fe:	9209      	str	r2, [sp, #36]	; 0x24
 8002300:	f89a 3000 	ldrb.w	r3, [sl]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a2 	beq.w	800244e <_vfiprintf_r+0x20e>
 800230a:	2300      	movs	r3, #0
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002314:	f10a 0a01 	add.w	sl, sl, #1
 8002318:	9304      	str	r3, [sp, #16]
 800231a:	9307      	str	r3, [sp, #28]
 800231c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002320:	931a      	str	r3, [sp, #104]	; 0x68
 8002322:	4654      	mov	r4, sl
 8002324:	2205      	movs	r2, #5
 8002326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800232a:	4858      	ldr	r0, [pc, #352]	; (800248c <_vfiprintf_r+0x24c>)
 800232c:	f7fd ff58 	bl	80001e0 <memchr>
 8002330:	9a04      	ldr	r2, [sp, #16]
 8002332:	b9d8      	cbnz	r0, 800236c <_vfiprintf_r+0x12c>
 8002334:	06d1      	lsls	r1, r2, #27
 8002336:	bf44      	itt	mi
 8002338:	2320      	movmi	r3, #32
 800233a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800233e:	0713      	lsls	r3, r2, #28
 8002340:	bf44      	itt	mi
 8002342:	232b      	movmi	r3, #43	; 0x2b
 8002344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002348:	f89a 3000 	ldrb.w	r3, [sl]
 800234c:	2b2a      	cmp	r3, #42	; 0x2a
 800234e:	d015      	beq.n	800237c <_vfiprintf_r+0x13c>
 8002350:	9a07      	ldr	r2, [sp, #28]
 8002352:	4654      	mov	r4, sl
 8002354:	2000      	movs	r0, #0
 8002356:	f04f 0c0a 	mov.w	ip, #10
 800235a:	4621      	mov	r1, r4
 800235c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002360:	3b30      	subs	r3, #48	; 0x30
 8002362:	2b09      	cmp	r3, #9
 8002364:	d94e      	bls.n	8002404 <_vfiprintf_r+0x1c4>
 8002366:	b1b0      	cbz	r0, 8002396 <_vfiprintf_r+0x156>
 8002368:	9207      	str	r2, [sp, #28]
 800236a:	e014      	b.n	8002396 <_vfiprintf_r+0x156>
 800236c:	eba0 0308 	sub.w	r3, r0, r8
 8002370:	fa09 f303 	lsl.w	r3, r9, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	9304      	str	r3, [sp, #16]
 8002378:	46a2      	mov	sl, r4
 800237a:	e7d2      	b.n	8002322 <_vfiprintf_r+0xe2>
 800237c:	9b03      	ldr	r3, [sp, #12]
 800237e:	1d19      	adds	r1, r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	9103      	str	r1, [sp, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	bfbb      	ittet	lt
 8002388:	425b      	neglt	r3, r3
 800238a:	f042 0202 	orrlt.w	r2, r2, #2
 800238e:	9307      	strge	r3, [sp, #28]
 8002390:	9307      	strlt	r3, [sp, #28]
 8002392:	bfb8      	it	lt
 8002394:	9204      	strlt	r2, [sp, #16]
 8002396:	7823      	ldrb	r3, [r4, #0]
 8002398:	2b2e      	cmp	r3, #46	; 0x2e
 800239a:	d10c      	bne.n	80023b6 <_vfiprintf_r+0x176>
 800239c:	7863      	ldrb	r3, [r4, #1]
 800239e:	2b2a      	cmp	r3, #42	; 0x2a
 80023a0:	d135      	bne.n	800240e <_vfiprintf_r+0x1ce>
 80023a2:	9b03      	ldr	r3, [sp, #12]
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	9203      	str	r2, [sp, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80023b2:	3402      	adds	r4, #2
 80023b4:	9305      	str	r3, [sp, #20]
 80023b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800249c <_vfiprintf_r+0x25c>
 80023ba:	7821      	ldrb	r1, [r4, #0]
 80023bc:	2203      	movs	r2, #3
 80023be:	4650      	mov	r0, sl
 80023c0:	f7fd ff0e 	bl	80001e0 <memchr>
 80023c4:	b140      	cbz	r0, 80023d8 <_vfiprintf_r+0x198>
 80023c6:	2340      	movs	r3, #64	; 0x40
 80023c8:	eba0 000a 	sub.w	r0, r0, sl
 80023cc:	fa03 f000 	lsl.w	r0, r3, r0
 80023d0:	9b04      	ldr	r3, [sp, #16]
 80023d2:	4303      	orrs	r3, r0
 80023d4:	3401      	adds	r4, #1
 80023d6:	9304      	str	r3, [sp, #16]
 80023d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023dc:	482c      	ldr	r0, [pc, #176]	; (8002490 <_vfiprintf_r+0x250>)
 80023de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023e2:	2206      	movs	r2, #6
 80023e4:	f7fd fefc 	bl	80001e0 <memchr>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d03f      	beq.n	800246c <_vfiprintf_r+0x22c>
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <_vfiprintf_r+0x254>)
 80023ee:	bb1b      	cbnz	r3, 8002438 <_vfiprintf_r+0x1f8>
 80023f0:	9b03      	ldr	r3, [sp, #12]
 80023f2:	3307      	adds	r3, #7
 80023f4:	f023 0307 	bic.w	r3, r3, #7
 80023f8:	3308      	adds	r3, #8
 80023fa:	9303      	str	r3, [sp, #12]
 80023fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023fe:	443b      	add	r3, r7
 8002400:	9309      	str	r3, [sp, #36]	; 0x24
 8002402:	e767      	b.n	80022d4 <_vfiprintf_r+0x94>
 8002404:	fb0c 3202 	mla	r2, ip, r2, r3
 8002408:	460c      	mov	r4, r1
 800240a:	2001      	movs	r0, #1
 800240c:	e7a5      	b.n	800235a <_vfiprintf_r+0x11a>
 800240e:	2300      	movs	r3, #0
 8002410:	3401      	adds	r4, #1
 8002412:	9305      	str	r3, [sp, #20]
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 0c0a 	mov.w	ip, #10
 800241a:	4620      	mov	r0, r4
 800241c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002420:	3a30      	subs	r2, #48	; 0x30
 8002422:	2a09      	cmp	r2, #9
 8002424:	d903      	bls.n	800242e <_vfiprintf_r+0x1ee>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0c5      	beq.n	80023b6 <_vfiprintf_r+0x176>
 800242a:	9105      	str	r1, [sp, #20]
 800242c:	e7c3      	b.n	80023b6 <_vfiprintf_r+0x176>
 800242e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002432:	4604      	mov	r4, r0
 8002434:	2301      	movs	r3, #1
 8002436:	e7f0      	b.n	800241a <_vfiprintf_r+0x1da>
 8002438:	ab03      	add	r3, sp, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	462a      	mov	r2, r5
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <_vfiprintf_r+0x258>)
 8002440:	a904      	add	r1, sp, #16
 8002442:	4630      	mov	r0, r6
 8002444:	f3af 8000 	nop.w
 8002448:	4607      	mov	r7, r0
 800244a:	1c78      	adds	r0, r7, #1
 800244c:	d1d6      	bne.n	80023fc <_vfiprintf_r+0x1bc>
 800244e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002450:	07d9      	lsls	r1, r3, #31
 8002452:	d405      	bmi.n	8002460 <_vfiprintf_r+0x220>
 8002454:	89ab      	ldrh	r3, [r5, #12]
 8002456:	059a      	lsls	r2, r3, #22
 8002458:	d402      	bmi.n	8002460 <_vfiprintf_r+0x220>
 800245a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800245c:	f000 fc35 	bl	8002cca <__retarget_lock_release_recursive>
 8002460:	89ab      	ldrh	r3, [r5, #12]
 8002462:	065b      	lsls	r3, r3, #25
 8002464:	f53f af12 	bmi.w	800228c <_vfiprintf_r+0x4c>
 8002468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800246a:	e711      	b.n	8002290 <_vfiprintf_r+0x50>
 800246c:	ab03      	add	r3, sp, #12
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	462a      	mov	r2, r5
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <_vfiprintf_r+0x258>)
 8002474:	a904      	add	r1, sp, #16
 8002476:	4630      	mov	r0, r6
 8002478:	f000 f880 	bl	800257c <_printf_i>
 800247c:	e7e4      	b.n	8002448 <_vfiprintf_r+0x208>
 800247e:	bf00      	nop
 8002480:	08003280 	.word	0x08003280
 8002484:	080032a0 	.word	0x080032a0
 8002488:	08003260 	.word	0x08003260
 800248c:	0800322c 	.word	0x0800322c
 8002490:	08003236 	.word	0x08003236
 8002494:	00000000 	.word	0x00000000
 8002498:	0800221b 	.word	0x0800221b
 800249c:	08003232 	.word	0x08003232

080024a0 <_printf_common>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	4616      	mov	r6, r2
 80024a6:	4699      	mov	r9, r3
 80024a8:	688a      	ldr	r2, [r1, #8]
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	bfb8      	it	lt
 80024b4:	4613      	movlt	r3, r2
 80024b6:	6033      	str	r3, [r6, #0]
 80024b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024bc:	4607      	mov	r7, r0
 80024be:	460c      	mov	r4, r1
 80024c0:	b10a      	cbz	r2, 80024c6 <_printf_common+0x26>
 80024c2:	3301      	adds	r3, #1
 80024c4:	6033      	str	r3, [r6, #0]
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	0699      	lsls	r1, r3, #26
 80024ca:	bf42      	ittt	mi
 80024cc:	6833      	ldrmi	r3, [r6, #0]
 80024ce:	3302      	addmi	r3, #2
 80024d0:	6033      	strmi	r3, [r6, #0]
 80024d2:	6825      	ldr	r5, [r4, #0]
 80024d4:	f015 0506 	ands.w	r5, r5, #6
 80024d8:	d106      	bne.n	80024e8 <_printf_common+0x48>
 80024da:	f104 0a19 	add.w	sl, r4, #25
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	6832      	ldr	r2, [r6, #0]
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	42ab      	cmp	r3, r5
 80024e6:	dc26      	bgt.n	8002536 <_printf_common+0x96>
 80024e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024ec:	1e13      	subs	r3, r2, #0
 80024ee:	6822      	ldr	r2, [r4, #0]
 80024f0:	bf18      	it	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	0692      	lsls	r2, r2, #26
 80024f6:	d42b      	bmi.n	8002550 <_printf_common+0xb0>
 80024f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024fc:	4649      	mov	r1, r9
 80024fe:	4638      	mov	r0, r7
 8002500:	47c0      	blx	r8
 8002502:	3001      	adds	r0, #1
 8002504:	d01e      	beq.n	8002544 <_printf_common+0xa4>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	68e5      	ldr	r5, [r4, #12]
 800250a:	6832      	ldr	r2, [r6, #0]
 800250c:	f003 0306 	and.w	r3, r3, #6
 8002510:	2b04      	cmp	r3, #4
 8002512:	bf08      	it	eq
 8002514:	1aad      	subeq	r5, r5, r2
 8002516:	68a3      	ldr	r3, [r4, #8]
 8002518:	6922      	ldr	r2, [r4, #16]
 800251a:	bf0c      	ite	eq
 800251c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002520:	2500      	movne	r5, #0
 8002522:	4293      	cmp	r3, r2
 8002524:	bfc4      	itt	gt
 8002526:	1a9b      	subgt	r3, r3, r2
 8002528:	18ed      	addgt	r5, r5, r3
 800252a:	2600      	movs	r6, #0
 800252c:	341a      	adds	r4, #26
 800252e:	42b5      	cmp	r5, r6
 8002530:	d11a      	bne.n	8002568 <_printf_common+0xc8>
 8002532:	2000      	movs	r0, #0
 8002534:	e008      	b.n	8002548 <_printf_common+0xa8>
 8002536:	2301      	movs	r3, #1
 8002538:	4652      	mov	r2, sl
 800253a:	4649      	mov	r1, r9
 800253c:	4638      	mov	r0, r7
 800253e:	47c0      	blx	r8
 8002540:	3001      	adds	r0, #1
 8002542:	d103      	bne.n	800254c <_printf_common+0xac>
 8002544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254c:	3501      	adds	r5, #1
 800254e:	e7c6      	b.n	80024de <_printf_common+0x3e>
 8002550:	18e1      	adds	r1, r4, r3
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	2030      	movs	r0, #48	; 0x30
 8002556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800255a:	4422      	add	r2, r4
 800255c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002564:	3302      	adds	r3, #2
 8002566:	e7c7      	b.n	80024f8 <_printf_common+0x58>
 8002568:	2301      	movs	r3, #1
 800256a:	4622      	mov	r2, r4
 800256c:	4649      	mov	r1, r9
 800256e:	4638      	mov	r0, r7
 8002570:	47c0      	blx	r8
 8002572:	3001      	adds	r0, #1
 8002574:	d0e6      	beq.n	8002544 <_printf_common+0xa4>
 8002576:	3601      	adds	r6, #1
 8002578:	e7d9      	b.n	800252e <_printf_common+0x8e>
	...

0800257c <_printf_i>:
 800257c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	7e0f      	ldrb	r7, [r1, #24]
 8002582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002584:	2f78      	cmp	r7, #120	; 0x78
 8002586:	4691      	mov	r9, r2
 8002588:	4680      	mov	r8, r0
 800258a:	460c      	mov	r4, r1
 800258c:	469a      	mov	sl, r3
 800258e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002592:	d807      	bhi.n	80025a4 <_printf_i+0x28>
 8002594:	2f62      	cmp	r7, #98	; 0x62
 8002596:	d80a      	bhi.n	80025ae <_printf_i+0x32>
 8002598:	2f00      	cmp	r7, #0
 800259a:	f000 80d8 	beq.w	800274e <_printf_i+0x1d2>
 800259e:	2f58      	cmp	r7, #88	; 0x58
 80025a0:	f000 80a3 	beq.w	80026ea <_printf_i+0x16e>
 80025a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025ac:	e03a      	b.n	8002624 <_printf_i+0xa8>
 80025ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025b2:	2b15      	cmp	r3, #21
 80025b4:	d8f6      	bhi.n	80025a4 <_printf_i+0x28>
 80025b6:	a101      	add	r1, pc, #4	; (adr r1, 80025bc <_printf_i+0x40>)
 80025b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025bc:	08002615 	.word	0x08002615
 80025c0:	08002629 	.word	0x08002629
 80025c4:	080025a5 	.word	0x080025a5
 80025c8:	080025a5 	.word	0x080025a5
 80025cc:	080025a5 	.word	0x080025a5
 80025d0:	080025a5 	.word	0x080025a5
 80025d4:	08002629 	.word	0x08002629
 80025d8:	080025a5 	.word	0x080025a5
 80025dc:	080025a5 	.word	0x080025a5
 80025e0:	080025a5 	.word	0x080025a5
 80025e4:	080025a5 	.word	0x080025a5
 80025e8:	08002735 	.word	0x08002735
 80025ec:	08002659 	.word	0x08002659
 80025f0:	08002717 	.word	0x08002717
 80025f4:	080025a5 	.word	0x080025a5
 80025f8:	080025a5 	.word	0x080025a5
 80025fc:	08002757 	.word	0x08002757
 8002600:	080025a5 	.word	0x080025a5
 8002604:	08002659 	.word	0x08002659
 8002608:	080025a5 	.word	0x080025a5
 800260c:	080025a5 	.word	0x080025a5
 8002610:	0800271f 	.word	0x0800271f
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	602a      	str	r2, [r5, #0]
 800261c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002624:	2301      	movs	r3, #1
 8002626:	e0a3      	b.n	8002770 <_printf_i+0x1f4>
 8002628:	6820      	ldr	r0, [r4, #0]
 800262a:	6829      	ldr	r1, [r5, #0]
 800262c:	0606      	lsls	r6, r0, #24
 800262e:	f101 0304 	add.w	r3, r1, #4
 8002632:	d50a      	bpl.n	800264a <_printf_i+0xce>
 8002634:	680e      	ldr	r6, [r1, #0]
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	2e00      	cmp	r6, #0
 800263a:	da03      	bge.n	8002644 <_printf_i+0xc8>
 800263c:	232d      	movs	r3, #45	; 0x2d
 800263e:	4276      	negs	r6, r6
 8002640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002644:	485e      	ldr	r0, [pc, #376]	; (80027c0 <_printf_i+0x244>)
 8002646:	230a      	movs	r3, #10
 8002648:	e019      	b.n	800267e <_printf_i+0x102>
 800264a:	680e      	ldr	r6, [r1, #0]
 800264c:	602b      	str	r3, [r5, #0]
 800264e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002652:	bf18      	it	ne
 8002654:	b236      	sxthne	r6, r6
 8002656:	e7ef      	b.n	8002638 <_printf_i+0xbc>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	1d19      	adds	r1, r3, #4
 800265e:	6029      	str	r1, [r5, #0]
 8002660:	0601      	lsls	r1, r0, #24
 8002662:	d501      	bpl.n	8002668 <_printf_i+0xec>
 8002664:	681e      	ldr	r6, [r3, #0]
 8002666:	e002      	b.n	800266e <_printf_i+0xf2>
 8002668:	0646      	lsls	r6, r0, #25
 800266a:	d5fb      	bpl.n	8002664 <_printf_i+0xe8>
 800266c:	881e      	ldrh	r6, [r3, #0]
 800266e:	4854      	ldr	r0, [pc, #336]	; (80027c0 <_printf_i+0x244>)
 8002670:	2f6f      	cmp	r7, #111	; 0x6f
 8002672:	bf0c      	ite	eq
 8002674:	2308      	moveq	r3, #8
 8002676:	230a      	movne	r3, #10
 8002678:	2100      	movs	r1, #0
 800267a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800267e:	6865      	ldr	r5, [r4, #4]
 8002680:	60a5      	str	r5, [r4, #8]
 8002682:	2d00      	cmp	r5, #0
 8002684:	bfa2      	ittt	ge
 8002686:	6821      	ldrge	r1, [r4, #0]
 8002688:	f021 0104 	bicge.w	r1, r1, #4
 800268c:	6021      	strge	r1, [r4, #0]
 800268e:	b90e      	cbnz	r6, 8002694 <_printf_i+0x118>
 8002690:	2d00      	cmp	r5, #0
 8002692:	d04d      	beq.n	8002730 <_printf_i+0x1b4>
 8002694:	4615      	mov	r5, r2
 8002696:	fbb6 f1f3 	udiv	r1, r6, r3
 800269a:	fb03 6711 	mls	r7, r3, r1, r6
 800269e:	5dc7      	ldrb	r7, [r0, r7]
 80026a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026a4:	4637      	mov	r7, r6
 80026a6:	42bb      	cmp	r3, r7
 80026a8:	460e      	mov	r6, r1
 80026aa:	d9f4      	bls.n	8002696 <_printf_i+0x11a>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d10b      	bne.n	80026c8 <_printf_i+0x14c>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	07de      	lsls	r6, r3, #31
 80026b4:	d508      	bpl.n	80026c8 <_printf_i+0x14c>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	6861      	ldr	r1, [r4, #4]
 80026ba:	4299      	cmp	r1, r3
 80026bc:	bfde      	ittt	le
 80026be:	2330      	movle	r3, #48	; 0x30
 80026c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80026c8:	1b52      	subs	r2, r2, r5
 80026ca:	6122      	str	r2, [r4, #16]
 80026cc:	f8cd a000 	str.w	sl, [sp]
 80026d0:	464b      	mov	r3, r9
 80026d2:	aa03      	add	r2, sp, #12
 80026d4:	4621      	mov	r1, r4
 80026d6:	4640      	mov	r0, r8
 80026d8:	f7ff fee2 	bl	80024a0 <_printf_common>
 80026dc:	3001      	adds	r0, #1
 80026de:	d14c      	bne.n	800277a <_printf_i+0x1fe>
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	b004      	add	sp, #16
 80026e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ea:	4835      	ldr	r0, [pc, #212]	; (80027c0 <_printf_i+0x244>)
 80026ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026f0:	6829      	ldr	r1, [r5, #0]
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80026f8:	6029      	str	r1, [r5, #0]
 80026fa:	061d      	lsls	r5, r3, #24
 80026fc:	d514      	bpl.n	8002728 <_printf_i+0x1ac>
 80026fe:	07df      	lsls	r7, r3, #31
 8002700:	bf44      	itt	mi
 8002702:	f043 0320 	orrmi.w	r3, r3, #32
 8002706:	6023      	strmi	r3, [r4, #0]
 8002708:	b91e      	cbnz	r6, 8002712 <_printf_i+0x196>
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	f023 0320 	bic.w	r3, r3, #32
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	2310      	movs	r3, #16
 8002714:	e7b0      	b.n	8002678 <_printf_i+0xfc>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	2378      	movs	r3, #120	; 0x78
 8002720:	4828      	ldr	r0, [pc, #160]	; (80027c4 <_printf_i+0x248>)
 8002722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002726:	e7e3      	b.n	80026f0 <_printf_i+0x174>
 8002728:	0659      	lsls	r1, r3, #25
 800272a:	bf48      	it	mi
 800272c:	b2b6      	uxthmi	r6, r6
 800272e:	e7e6      	b.n	80026fe <_printf_i+0x182>
 8002730:	4615      	mov	r5, r2
 8002732:	e7bb      	b.n	80026ac <_printf_i+0x130>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	6826      	ldr	r6, [r4, #0]
 8002738:	6961      	ldr	r1, [r4, #20]
 800273a:	1d18      	adds	r0, r3, #4
 800273c:	6028      	str	r0, [r5, #0]
 800273e:	0635      	lsls	r5, r6, #24
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	d501      	bpl.n	8002748 <_printf_i+0x1cc>
 8002744:	6019      	str	r1, [r3, #0]
 8002746:	e002      	b.n	800274e <_printf_i+0x1d2>
 8002748:	0670      	lsls	r0, r6, #25
 800274a:	d5fb      	bpl.n	8002744 <_printf_i+0x1c8>
 800274c:	8019      	strh	r1, [r3, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	6123      	str	r3, [r4, #16]
 8002752:	4615      	mov	r5, r2
 8002754:	e7ba      	b.n	80026cc <_printf_i+0x150>
 8002756:	682b      	ldr	r3, [r5, #0]
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	602a      	str	r2, [r5, #0]
 800275c:	681d      	ldr	r5, [r3, #0]
 800275e:	6862      	ldr	r2, [r4, #4]
 8002760:	2100      	movs	r1, #0
 8002762:	4628      	mov	r0, r5
 8002764:	f7fd fd3c 	bl	80001e0 <memchr>
 8002768:	b108      	cbz	r0, 800276e <_printf_i+0x1f2>
 800276a:	1b40      	subs	r0, r0, r5
 800276c:	6060      	str	r0, [r4, #4]
 800276e:	6863      	ldr	r3, [r4, #4]
 8002770:	6123      	str	r3, [r4, #16]
 8002772:	2300      	movs	r3, #0
 8002774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002778:	e7a8      	b.n	80026cc <_printf_i+0x150>
 800277a:	6923      	ldr	r3, [r4, #16]
 800277c:	462a      	mov	r2, r5
 800277e:	4649      	mov	r1, r9
 8002780:	4640      	mov	r0, r8
 8002782:	47d0      	blx	sl
 8002784:	3001      	adds	r0, #1
 8002786:	d0ab      	beq.n	80026e0 <_printf_i+0x164>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	079b      	lsls	r3, r3, #30
 800278c:	d413      	bmi.n	80027b6 <_printf_i+0x23a>
 800278e:	68e0      	ldr	r0, [r4, #12]
 8002790:	9b03      	ldr	r3, [sp, #12]
 8002792:	4298      	cmp	r0, r3
 8002794:	bfb8      	it	lt
 8002796:	4618      	movlt	r0, r3
 8002798:	e7a4      	b.n	80026e4 <_printf_i+0x168>
 800279a:	2301      	movs	r3, #1
 800279c:	4632      	mov	r2, r6
 800279e:	4649      	mov	r1, r9
 80027a0:	4640      	mov	r0, r8
 80027a2:	47d0      	blx	sl
 80027a4:	3001      	adds	r0, #1
 80027a6:	d09b      	beq.n	80026e0 <_printf_i+0x164>
 80027a8:	3501      	adds	r5, #1
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	9903      	ldr	r1, [sp, #12]
 80027ae:	1a5b      	subs	r3, r3, r1
 80027b0:	42ab      	cmp	r3, r5
 80027b2:	dcf2      	bgt.n	800279a <_printf_i+0x21e>
 80027b4:	e7eb      	b.n	800278e <_printf_i+0x212>
 80027b6:	2500      	movs	r5, #0
 80027b8:	f104 0619 	add.w	r6, r4, #25
 80027bc:	e7f5      	b.n	80027aa <_printf_i+0x22e>
 80027be:	bf00      	nop
 80027c0:	0800323d 	.word	0x0800323d
 80027c4:	0800324e 	.word	0x0800324e

080027c8 <__swbuf_r>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	460e      	mov	r6, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	4605      	mov	r5, r0
 80027d0:	b118      	cbz	r0, 80027da <__swbuf_r+0x12>
 80027d2:	6983      	ldr	r3, [r0, #24]
 80027d4:	b90b      	cbnz	r3, 80027da <__swbuf_r+0x12>
 80027d6:	f000 f9d9 	bl	8002b8c <__sinit>
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <__swbuf_r+0x98>)
 80027dc:	429c      	cmp	r4, r3
 80027de:	d12b      	bne.n	8002838 <__swbuf_r+0x70>
 80027e0:	686c      	ldr	r4, [r5, #4]
 80027e2:	69a3      	ldr	r3, [r4, #24]
 80027e4:	60a3      	str	r3, [r4, #8]
 80027e6:	89a3      	ldrh	r3, [r4, #12]
 80027e8:	071a      	lsls	r2, r3, #28
 80027ea:	d52f      	bpl.n	800284c <__swbuf_r+0x84>
 80027ec:	6923      	ldr	r3, [r4, #16]
 80027ee:	b36b      	cbz	r3, 800284c <__swbuf_r+0x84>
 80027f0:	6923      	ldr	r3, [r4, #16]
 80027f2:	6820      	ldr	r0, [r4, #0]
 80027f4:	1ac0      	subs	r0, r0, r3
 80027f6:	6963      	ldr	r3, [r4, #20]
 80027f8:	b2f6      	uxtb	r6, r6
 80027fa:	4283      	cmp	r3, r0
 80027fc:	4637      	mov	r7, r6
 80027fe:	dc04      	bgt.n	800280a <__swbuf_r+0x42>
 8002800:	4621      	mov	r1, r4
 8002802:	4628      	mov	r0, r5
 8002804:	f000 f92e 	bl	8002a64 <_fflush_r>
 8002808:	bb30      	cbnz	r0, 8002858 <__swbuf_r+0x90>
 800280a:	68a3      	ldr	r3, [r4, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60a3      	str	r3, [r4, #8]
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	6022      	str	r2, [r4, #0]
 8002816:	701e      	strb	r6, [r3, #0]
 8002818:	6963      	ldr	r3, [r4, #20]
 800281a:	3001      	adds	r0, #1
 800281c:	4283      	cmp	r3, r0
 800281e:	d004      	beq.n	800282a <__swbuf_r+0x62>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	07db      	lsls	r3, r3, #31
 8002824:	d506      	bpl.n	8002834 <__swbuf_r+0x6c>
 8002826:	2e0a      	cmp	r6, #10
 8002828:	d104      	bne.n	8002834 <__swbuf_r+0x6c>
 800282a:	4621      	mov	r1, r4
 800282c:	4628      	mov	r0, r5
 800282e:	f000 f919 	bl	8002a64 <_fflush_r>
 8002832:	b988      	cbnz	r0, 8002858 <__swbuf_r+0x90>
 8002834:	4638      	mov	r0, r7
 8002836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <__swbuf_r+0x9c>)
 800283a:	429c      	cmp	r4, r3
 800283c:	d101      	bne.n	8002842 <__swbuf_r+0x7a>
 800283e:	68ac      	ldr	r4, [r5, #8]
 8002840:	e7cf      	b.n	80027e2 <__swbuf_r+0x1a>
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <__swbuf_r+0xa0>)
 8002844:	429c      	cmp	r4, r3
 8002846:	bf08      	it	eq
 8002848:	68ec      	ldreq	r4, [r5, #12]
 800284a:	e7ca      	b.n	80027e2 <__swbuf_r+0x1a>
 800284c:	4621      	mov	r1, r4
 800284e:	4628      	mov	r0, r5
 8002850:	f000 f80c 	bl	800286c <__swsetup_r>
 8002854:	2800      	cmp	r0, #0
 8002856:	d0cb      	beq.n	80027f0 <__swbuf_r+0x28>
 8002858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800285c:	e7ea      	b.n	8002834 <__swbuf_r+0x6c>
 800285e:	bf00      	nop
 8002860:	08003280 	.word	0x08003280
 8002864:	080032a0 	.word	0x080032a0
 8002868:	08003260 	.word	0x08003260

0800286c <__swsetup_r>:
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <__swsetup_r+0xcc>)
 800286e:	b570      	push	{r4, r5, r6, lr}
 8002870:	681d      	ldr	r5, [r3, #0]
 8002872:	4606      	mov	r6, r0
 8002874:	460c      	mov	r4, r1
 8002876:	b125      	cbz	r5, 8002882 <__swsetup_r+0x16>
 8002878:	69ab      	ldr	r3, [r5, #24]
 800287a:	b913      	cbnz	r3, 8002882 <__swsetup_r+0x16>
 800287c:	4628      	mov	r0, r5
 800287e:	f000 f985 	bl	8002b8c <__sinit>
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <__swsetup_r+0xd0>)
 8002884:	429c      	cmp	r4, r3
 8002886:	d10f      	bne.n	80028a8 <__swsetup_r+0x3c>
 8002888:	686c      	ldr	r4, [r5, #4]
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002890:	0719      	lsls	r1, r3, #28
 8002892:	d42c      	bmi.n	80028ee <__swsetup_r+0x82>
 8002894:	06dd      	lsls	r5, r3, #27
 8002896:	d411      	bmi.n	80028bc <__swsetup_r+0x50>
 8002898:	2309      	movs	r3, #9
 800289a:	6033      	str	r3, [r6, #0]
 800289c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028a0:	81a3      	strh	r3, [r4, #12]
 80028a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a6:	e03e      	b.n	8002926 <__swsetup_r+0xba>
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <__swsetup_r+0xd4>)
 80028aa:	429c      	cmp	r4, r3
 80028ac:	d101      	bne.n	80028b2 <__swsetup_r+0x46>
 80028ae:	68ac      	ldr	r4, [r5, #8]
 80028b0:	e7eb      	b.n	800288a <__swsetup_r+0x1e>
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <__swsetup_r+0xd8>)
 80028b4:	429c      	cmp	r4, r3
 80028b6:	bf08      	it	eq
 80028b8:	68ec      	ldreq	r4, [r5, #12]
 80028ba:	e7e6      	b.n	800288a <__swsetup_r+0x1e>
 80028bc:	0758      	lsls	r0, r3, #29
 80028be:	d512      	bpl.n	80028e6 <__swsetup_r+0x7a>
 80028c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028c2:	b141      	cbz	r1, 80028d6 <__swsetup_r+0x6a>
 80028c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028c8:	4299      	cmp	r1, r3
 80028ca:	d002      	beq.n	80028d2 <__swsetup_r+0x66>
 80028cc:	4630      	mov	r0, r6
 80028ce:	f000 fa63 	bl	8002d98 <_free_r>
 80028d2:	2300      	movs	r3, #0
 80028d4:	6363      	str	r3, [r4, #52]	; 0x34
 80028d6:	89a3      	ldrh	r3, [r4, #12]
 80028d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028dc:	81a3      	strh	r3, [r4, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	6063      	str	r3, [r4, #4]
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	6923      	ldr	r3, [r4, #16]
 80028f0:	b94b      	cbnz	r3, 8002906 <__swsetup_r+0x9a>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d003      	beq.n	8002906 <__swsetup_r+0x9a>
 80028fe:	4621      	mov	r1, r4
 8002900:	4630      	mov	r0, r6
 8002902:	f000 fa09 	bl	8002d18 <__smakebuf_r>
 8002906:	89a0      	ldrh	r0, [r4, #12]
 8002908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800290c:	f010 0301 	ands.w	r3, r0, #1
 8002910:	d00a      	beq.n	8002928 <__swsetup_r+0xbc>
 8002912:	2300      	movs	r3, #0
 8002914:	60a3      	str	r3, [r4, #8]
 8002916:	6963      	ldr	r3, [r4, #20]
 8002918:	425b      	negs	r3, r3
 800291a:	61a3      	str	r3, [r4, #24]
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	b943      	cbnz	r3, 8002932 <__swsetup_r+0xc6>
 8002920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002924:	d1ba      	bne.n	800289c <__swsetup_r+0x30>
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	0781      	lsls	r1, r0, #30
 800292a:	bf58      	it	pl
 800292c:	6963      	ldrpl	r3, [r4, #20]
 800292e:	60a3      	str	r3, [r4, #8]
 8002930:	e7f4      	b.n	800291c <__swsetup_r+0xb0>
 8002932:	2000      	movs	r0, #0
 8002934:	e7f7      	b.n	8002926 <__swsetup_r+0xba>
 8002936:	bf00      	nop
 8002938:	2000000c 	.word	0x2000000c
 800293c:	08003280 	.word	0x08003280
 8002940:	080032a0 	.word	0x080032a0
 8002944:	08003260 	.word	0x08003260

08002948 <abort>:
 8002948:	b508      	push	{r3, lr}
 800294a:	2006      	movs	r0, #6
 800294c:	f000 fb3c 	bl	8002fc8 <raise>
 8002950:	2001      	movs	r0, #1
 8002952:	f7fe f895 	bl	8000a80 <_exit>
	...

08002958 <__sflush_r>:
 8002958:	898a      	ldrh	r2, [r1, #12]
 800295a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800295e:	4605      	mov	r5, r0
 8002960:	0710      	lsls	r0, r2, #28
 8002962:	460c      	mov	r4, r1
 8002964:	d458      	bmi.n	8002a18 <__sflush_r+0xc0>
 8002966:	684b      	ldr	r3, [r1, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	dc05      	bgt.n	8002978 <__sflush_r+0x20>
 800296c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	dc02      	bgt.n	8002978 <__sflush_r+0x20>
 8002972:	2000      	movs	r0, #0
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800297a:	2e00      	cmp	r6, #0
 800297c:	d0f9      	beq.n	8002972 <__sflush_r+0x1a>
 800297e:	2300      	movs	r3, #0
 8002980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002984:	682f      	ldr	r7, [r5, #0]
 8002986:	602b      	str	r3, [r5, #0]
 8002988:	d032      	beq.n	80029f0 <__sflush_r+0x98>
 800298a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	075a      	lsls	r2, r3, #29
 8002990:	d505      	bpl.n	800299e <__sflush_r+0x46>
 8002992:	6863      	ldr	r3, [r4, #4]
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002998:	b10b      	cbz	r3, 800299e <__sflush_r+0x46>
 800299a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800299c:	1ac0      	subs	r0, r0, r3
 800299e:	2300      	movs	r3, #0
 80029a0:	4602      	mov	r2, r0
 80029a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029a4:	6a21      	ldr	r1, [r4, #32]
 80029a6:	4628      	mov	r0, r5
 80029a8:	47b0      	blx	r6
 80029aa:	1c43      	adds	r3, r0, #1
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	d106      	bne.n	80029be <__sflush_r+0x66>
 80029b0:	6829      	ldr	r1, [r5, #0]
 80029b2:	291d      	cmp	r1, #29
 80029b4:	d82c      	bhi.n	8002a10 <__sflush_r+0xb8>
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <__sflush_r+0x108>)
 80029b8:	40ca      	lsrs	r2, r1
 80029ba:	07d6      	lsls	r6, r2, #31
 80029bc:	d528      	bpl.n	8002a10 <__sflush_r+0xb8>
 80029be:	2200      	movs	r2, #0
 80029c0:	6062      	str	r2, [r4, #4]
 80029c2:	04d9      	lsls	r1, r3, #19
 80029c4:	6922      	ldr	r2, [r4, #16]
 80029c6:	6022      	str	r2, [r4, #0]
 80029c8:	d504      	bpl.n	80029d4 <__sflush_r+0x7c>
 80029ca:	1c42      	adds	r2, r0, #1
 80029cc:	d101      	bne.n	80029d2 <__sflush_r+0x7a>
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	b903      	cbnz	r3, 80029d4 <__sflush_r+0x7c>
 80029d2:	6560      	str	r0, [r4, #84]	; 0x54
 80029d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029d6:	602f      	str	r7, [r5, #0]
 80029d8:	2900      	cmp	r1, #0
 80029da:	d0ca      	beq.n	8002972 <__sflush_r+0x1a>
 80029dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029e0:	4299      	cmp	r1, r3
 80029e2:	d002      	beq.n	80029ea <__sflush_r+0x92>
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 f9d7 	bl	8002d98 <_free_r>
 80029ea:	2000      	movs	r0, #0
 80029ec:	6360      	str	r0, [r4, #52]	; 0x34
 80029ee:	e7c1      	b.n	8002974 <__sflush_r+0x1c>
 80029f0:	6a21      	ldr	r1, [r4, #32]
 80029f2:	2301      	movs	r3, #1
 80029f4:	4628      	mov	r0, r5
 80029f6:	47b0      	blx	r6
 80029f8:	1c41      	adds	r1, r0, #1
 80029fa:	d1c7      	bne.n	800298c <__sflush_r+0x34>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0c4      	beq.n	800298c <__sflush_r+0x34>
 8002a02:	2b1d      	cmp	r3, #29
 8002a04:	d001      	beq.n	8002a0a <__sflush_r+0xb2>
 8002a06:	2b16      	cmp	r3, #22
 8002a08:	d101      	bne.n	8002a0e <__sflush_r+0xb6>
 8002a0a:	602f      	str	r7, [r5, #0]
 8002a0c:	e7b1      	b.n	8002972 <__sflush_r+0x1a>
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a14:	81a3      	strh	r3, [r4, #12]
 8002a16:	e7ad      	b.n	8002974 <__sflush_r+0x1c>
 8002a18:	690f      	ldr	r7, [r1, #16]
 8002a1a:	2f00      	cmp	r7, #0
 8002a1c:	d0a9      	beq.n	8002972 <__sflush_r+0x1a>
 8002a1e:	0793      	lsls	r3, r2, #30
 8002a20:	680e      	ldr	r6, [r1, #0]
 8002a22:	bf08      	it	eq
 8002a24:	694b      	ldreq	r3, [r1, #20]
 8002a26:	600f      	str	r7, [r1, #0]
 8002a28:	bf18      	it	ne
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	eba6 0807 	sub.w	r8, r6, r7
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	f1b8 0f00 	cmp.w	r8, #0
 8002a36:	dd9c      	ble.n	8002972 <__sflush_r+0x1a>
 8002a38:	6a21      	ldr	r1, [r4, #32]
 8002a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	463a      	mov	r2, r7
 8002a40:	4628      	mov	r0, r5
 8002a42:	47b0      	blx	r6
 8002a44:	2800      	cmp	r0, #0
 8002a46:	dc06      	bgt.n	8002a56 <__sflush_r+0xfe>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a54:	e78e      	b.n	8002974 <__sflush_r+0x1c>
 8002a56:	4407      	add	r7, r0
 8002a58:	eba8 0800 	sub.w	r8, r8, r0
 8002a5c:	e7e9      	b.n	8002a32 <__sflush_r+0xda>
 8002a5e:	bf00      	nop
 8002a60:	20400001 	.word	0x20400001

08002a64 <_fflush_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	690b      	ldr	r3, [r1, #16]
 8002a68:	4605      	mov	r5, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	b913      	cbnz	r3, 8002a74 <_fflush_r+0x10>
 8002a6e:	2500      	movs	r5, #0
 8002a70:	4628      	mov	r0, r5
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	b118      	cbz	r0, 8002a7e <_fflush_r+0x1a>
 8002a76:	6983      	ldr	r3, [r0, #24]
 8002a78:	b90b      	cbnz	r3, 8002a7e <_fflush_r+0x1a>
 8002a7a:	f000 f887 	bl	8002b8c <__sinit>
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <_fflush_r+0x6c>)
 8002a80:	429c      	cmp	r4, r3
 8002a82:	d11b      	bne.n	8002abc <_fflush_r+0x58>
 8002a84:	686c      	ldr	r4, [r5, #4]
 8002a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <_fflush_r+0xa>
 8002a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a90:	07d0      	lsls	r0, r2, #31
 8002a92:	d404      	bmi.n	8002a9e <_fflush_r+0x3a>
 8002a94:	0599      	lsls	r1, r3, #22
 8002a96:	d402      	bmi.n	8002a9e <_fflush_r+0x3a>
 8002a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a9a:	f000 f915 	bl	8002cc8 <__retarget_lock_acquire_recursive>
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	f7ff ff59 	bl	8002958 <__sflush_r>
 8002aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aa8:	07da      	lsls	r2, r3, #31
 8002aaa:	4605      	mov	r5, r0
 8002aac:	d4e0      	bmi.n	8002a70 <_fflush_r+0xc>
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	059b      	lsls	r3, r3, #22
 8002ab2:	d4dd      	bmi.n	8002a70 <_fflush_r+0xc>
 8002ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ab6:	f000 f908 	bl	8002cca <__retarget_lock_release_recursive>
 8002aba:	e7d9      	b.n	8002a70 <_fflush_r+0xc>
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <_fflush_r+0x70>)
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d101      	bne.n	8002ac6 <_fflush_r+0x62>
 8002ac2:	68ac      	ldr	r4, [r5, #8]
 8002ac4:	e7df      	b.n	8002a86 <_fflush_r+0x22>
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <_fflush_r+0x74>)
 8002ac8:	429c      	cmp	r4, r3
 8002aca:	bf08      	it	eq
 8002acc:	68ec      	ldreq	r4, [r5, #12]
 8002ace:	e7da      	b.n	8002a86 <_fflush_r+0x22>
 8002ad0:	08003280 	.word	0x08003280
 8002ad4:	080032a0 	.word	0x080032a0
 8002ad8:	08003260 	.word	0x08003260

08002adc <std>:
 8002adc:	2300      	movs	r3, #0
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aea:	6083      	str	r3, [r0, #8]
 8002aec:	8181      	strh	r1, [r0, #12]
 8002aee:	6643      	str	r3, [r0, #100]	; 0x64
 8002af0:	81c2      	strh	r2, [r0, #14]
 8002af2:	6183      	str	r3, [r0, #24]
 8002af4:	4619      	mov	r1, r3
 8002af6:	2208      	movs	r2, #8
 8002af8:	305c      	adds	r0, #92	; 0x5c
 8002afa:	f7ff fb6f 	bl	80021dc <memset>
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <std+0x38>)
 8002b00:	6263      	str	r3, [r4, #36]	; 0x24
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <std+0x3c>)
 8002b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <std+0x40>)
 8002b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <std+0x44>)
 8002b0c:	6224      	str	r4, [r4, #32]
 8002b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop
 8002b14:	08003001 	.word	0x08003001
 8002b18:	08003023 	.word	0x08003023
 8002b1c:	0800305b 	.word	0x0800305b
 8002b20:	0800307f 	.word	0x0800307f

08002b24 <_cleanup_r>:
 8002b24:	4901      	ldr	r1, [pc, #4]	; (8002b2c <_cleanup_r+0x8>)
 8002b26:	f000 b8af 	b.w	8002c88 <_fwalk_reent>
 8002b2a:	bf00      	nop
 8002b2c:	08002a65 	.word	0x08002a65

08002b30 <__sfmoreglue>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2268      	movs	r2, #104	; 0x68
 8002b34:	1e4d      	subs	r5, r1, #1
 8002b36:	4355      	muls	r5, r2
 8002b38:	460e      	mov	r6, r1
 8002b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b3e:	f000 f997 	bl	8002e70 <_malloc_r>
 8002b42:	4604      	mov	r4, r0
 8002b44:	b140      	cbz	r0, 8002b58 <__sfmoreglue+0x28>
 8002b46:	2100      	movs	r1, #0
 8002b48:	e9c0 1600 	strd	r1, r6, [r0]
 8002b4c:	300c      	adds	r0, #12
 8002b4e:	60a0      	str	r0, [r4, #8]
 8002b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b54:	f7ff fb42 	bl	80021dc <memset>
 8002b58:	4620      	mov	r0, r4
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}

08002b5c <__sfp_lock_acquire>:
 8002b5c:	4801      	ldr	r0, [pc, #4]	; (8002b64 <__sfp_lock_acquire+0x8>)
 8002b5e:	f000 b8b3 	b.w	8002cc8 <__retarget_lock_acquire_recursive>
 8002b62:	bf00      	nop
 8002b64:	200000d9 	.word	0x200000d9

08002b68 <__sfp_lock_release>:
 8002b68:	4801      	ldr	r0, [pc, #4]	; (8002b70 <__sfp_lock_release+0x8>)
 8002b6a:	f000 b8ae 	b.w	8002cca <__retarget_lock_release_recursive>
 8002b6e:	bf00      	nop
 8002b70:	200000d9 	.word	0x200000d9

08002b74 <__sinit_lock_acquire>:
 8002b74:	4801      	ldr	r0, [pc, #4]	; (8002b7c <__sinit_lock_acquire+0x8>)
 8002b76:	f000 b8a7 	b.w	8002cc8 <__retarget_lock_acquire_recursive>
 8002b7a:	bf00      	nop
 8002b7c:	200000da 	.word	0x200000da

08002b80 <__sinit_lock_release>:
 8002b80:	4801      	ldr	r0, [pc, #4]	; (8002b88 <__sinit_lock_release+0x8>)
 8002b82:	f000 b8a2 	b.w	8002cca <__retarget_lock_release_recursive>
 8002b86:	bf00      	nop
 8002b88:	200000da 	.word	0x200000da

08002b8c <__sinit>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4604      	mov	r4, r0
 8002b90:	f7ff fff0 	bl	8002b74 <__sinit_lock_acquire>
 8002b94:	69a3      	ldr	r3, [r4, #24]
 8002b96:	b11b      	cbz	r3, 8002ba0 <__sinit+0x14>
 8002b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b9c:	f7ff bff0 	b.w	8002b80 <__sinit_lock_release>
 8002ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <__sinit+0x68>)
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <__sinit+0x6c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8002bae:	42a3      	cmp	r3, r4
 8002bb0:	bf04      	itt	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	61a3      	streq	r3, [r4, #24]
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f000 f820 	bl	8002bfc <__sfp>
 8002bbc:	6060      	str	r0, [r4, #4]
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f000 f81c 	bl	8002bfc <__sfp>
 8002bc4:	60a0      	str	r0, [r4, #8]
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f000 f818 	bl	8002bfc <__sfp>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60e0      	str	r0, [r4, #12]
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	6860      	ldr	r0, [r4, #4]
 8002bd4:	f7ff ff82 	bl	8002adc <std>
 8002bd8:	68a0      	ldr	r0, [r4, #8]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2109      	movs	r1, #9
 8002bde:	f7ff ff7d 	bl	8002adc <std>
 8002be2:	68e0      	ldr	r0, [r4, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	2112      	movs	r1, #18
 8002be8:	f7ff ff78 	bl	8002adc <std>
 8002bec:	2301      	movs	r3, #1
 8002bee:	61a3      	str	r3, [r4, #24]
 8002bf0:	e7d2      	b.n	8002b98 <__sinit+0xc>
 8002bf2:	bf00      	nop
 8002bf4:	08003228 	.word	0x08003228
 8002bf8:	08002b25 	.word	0x08002b25

08002bfc <__sfp>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	4607      	mov	r7, r0
 8002c00:	f7ff ffac 	bl	8002b5c <__sfp_lock_acquire>
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <__sfp+0x84>)
 8002c06:	681e      	ldr	r6, [r3, #0]
 8002c08:	69b3      	ldr	r3, [r6, #24]
 8002c0a:	b913      	cbnz	r3, 8002c12 <__sfp+0x16>
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f7ff ffbd 	bl	8002b8c <__sinit>
 8002c12:	3648      	adds	r6, #72	; 0x48
 8002c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	d503      	bpl.n	8002c24 <__sfp+0x28>
 8002c1c:	6833      	ldr	r3, [r6, #0]
 8002c1e:	b30b      	cbz	r3, 8002c64 <__sfp+0x68>
 8002c20:	6836      	ldr	r6, [r6, #0]
 8002c22:	e7f7      	b.n	8002c14 <__sfp+0x18>
 8002c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c28:	b9d5      	cbnz	r5, 8002c60 <__sfp+0x64>
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <__sfp+0x88>)
 8002c2c:	60e3      	str	r3, [r4, #12]
 8002c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c32:	6665      	str	r5, [r4, #100]	; 0x64
 8002c34:	f000 f847 	bl	8002cc6 <__retarget_lock_init_recursive>
 8002c38:	f7ff ff96 	bl	8002b68 <__sfp_lock_release>
 8002c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c44:	6025      	str	r5, [r4, #0]
 8002c46:	61a5      	str	r5, [r4, #24]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c50:	f7ff fac4 	bl	80021dc <memset>
 8002c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c60:	3468      	adds	r4, #104	; 0x68
 8002c62:	e7d9      	b.n	8002c18 <__sfp+0x1c>
 8002c64:	2104      	movs	r1, #4
 8002c66:	4638      	mov	r0, r7
 8002c68:	f7ff ff62 	bl	8002b30 <__sfmoreglue>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	6030      	str	r0, [r6, #0]
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d1d5      	bne.n	8002c20 <__sfp+0x24>
 8002c74:	f7ff ff78 	bl	8002b68 <__sfp_lock_release>
 8002c78:	230c      	movs	r3, #12
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	e7ee      	b.n	8002c5c <__sfp+0x60>
 8002c7e:	bf00      	nop
 8002c80:	08003228 	.word	0x08003228
 8002c84:	ffff0001 	.word	0xffff0001

08002c88 <_fwalk_reent>:
 8002c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c8c:	4606      	mov	r6, r0
 8002c8e:	4688      	mov	r8, r1
 8002c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c94:	2700      	movs	r7, #0
 8002c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8002c9e:	d505      	bpl.n	8002cac <_fwalk_reent+0x24>
 8002ca0:	6824      	ldr	r4, [r4, #0]
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d1f7      	bne.n	8002c96 <_fwalk_reent+0xe>
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cac:	89ab      	ldrh	r3, [r5, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d907      	bls.n	8002cc2 <_fwalk_reent+0x3a>
 8002cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <_fwalk_reent+0x3a>
 8002cba:	4629      	mov	r1, r5
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	47c0      	blx	r8
 8002cc0:	4307      	orrs	r7, r0
 8002cc2:	3568      	adds	r5, #104	; 0x68
 8002cc4:	e7e9      	b.n	8002c9a <_fwalk_reent+0x12>

08002cc6 <__retarget_lock_init_recursive>:
 8002cc6:	4770      	bx	lr

08002cc8 <__retarget_lock_acquire_recursive>:
 8002cc8:	4770      	bx	lr

08002cca <__retarget_lock_release_recursive>:
 8002cca:	4770      	bx	lr

08002ccc <__swhatbuf_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	460e      	mov	r6, r1
 8002cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	b096      	sub	sp, #88	; 0x58
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	da08      	bge.n	8002cf0 <__swhatbuf_r+0x24>
 8002cde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	602a      	str	r2, [r5, #0]
 8002ce6:	061a      	lsls	r2, r3, #24
 8002ce8:	d410      	bmi.n	8002d0c <__swhatbuf_r+0x40>
 8002cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cee:	e00e      	b.n	8002d0e <__swhatbuf_r+0x42>
 8002cf0:	466a      	mov	r2, sp
 8002cf2:	f000 f9eb 	bl	80030cc <_fstat_r>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	dbf1      	blt.n	8002cde <__swhatbuf_r+0x12>
 8002cfa:	9a01      	ldr	r2, [sp, #4]
 8002cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d04:	425a      	negs	r2, r3
 8002d06:	415a      	adcs	r2, r3
 8002d08:	602a      	str	r2, [r5, #0]
 8002d0a:	e7ee      	b.n	8002cea <__swhatbuf_r+0x1e>
 8002d0c:	2340      	movs	r3, #64	; 0x40
 8002d0e:	2000      	movs	r0, #0
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	b016      	add	sp, #88	; 0x58
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d18 <__smakebuf_r>:
 8002d18:	898b      	ldrh	r3, [r1, #12]
 8002d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d1c:	079d      	lsls	r5, r3, #30
 8002d1e:	4606      	mov	r6, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	d507      	bpl.n	8002d34 <__smakebuf_r+0x1c>
 8002d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6163      	str	r3, [r4, #20]
 8002d30:	b002      	add	sp, #8
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	ab01      	add	r3, sp, #4
 8002d36:	466a      	mov	r2, sp
 8002d38:	f7ff ffc8 	bl	8002ccc <__swhatbuf_r>
 8002d3c:	9900      	ldr	r1, [sp, #0]
 8002d3e:	4605      	mov	r5, r0
 8002d40:	4630      	mov	r0, r6
 8002d42:	f000 f895 	bl	8002e70 <_malloc_r>
 8002d46:	b948      	cbnz	r0, 8002d5c <__smakebuf_r+0x44>
 8002d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d4c:	059a      	lsls	r2, r3, #22
 8002d4e:	d4ef      	bmi.n	8002d30 <__smakebuf_r+0x18>
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	81a3      	strh	r3, [r4, #12]
 8002d5a:	e7e3      	b.n	8002d24 <__smakebuf_r+0xc>
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <__smakebuf_r+0x7c>)
 8002d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	6020      	str	r0, [r4, #0]
 8002d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	9b00      	ldr	r3, [sp, #0]
 8002d6c:	6163      	str	r3, [r4, #20]
 8002d6e:	9b01      	ldr	r3, [sp, #4]
 8002d70:	6120      	str	r0, [r4, #16]
 8002d72:	b15b      	cbz	r3, 8002d8c <__smakebuf_r+0x74>
 8002d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f000 f9b9 	bl	80030f0 <_isatty_r>
 8002d7e:	b128      	cbz	r0, 8002d8c <__smakebuf_r+0x74>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	89a0      	ldrh	r0, [r4, #12]
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	81a5      	strh	r5, [r4, #12]
 8002d92:	e7cd      	b.n	8002d30 <__smakebuf_r+0x18>
 8002d94:	08002b25 	.word	0x08002b25

08002d98 <_free_r>:
 8002d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	d044      	beq.n	8002e28 <_free_r+0x90>
 8002d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da2:	9001      	str	r0, [sp, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f1a1 0404 	sub.w	r4, r1, #4
 8002daa:	bfb8      	it	lt
 8002dac:	18e4      	addlt	r4, r4, r3
 8002dae:	f000 f9c1 	bl	8003134 <__malloc_lock>
 8002db2:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <_free_r+0x94>)
 8002db4:	9801      	ldr	r0, [sp, #4]
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	b933      	cbnz	r3, 8002dc8 <_free_r+0x30>
 8002dba:	6063      	str	r3, [r4, #4]
 8002dbc:	6014      	str	r4, [r2, #0]
 8002dbe:	b003      	add	sp, #12
 8002dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dc4:	f000 b9bc 	b.w	8003140 <__malloc_unlock>
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d908      	bls.n	8002dde <_free_r+0x46>
 8002dcc:	6825      	ldr	r5, [r4, #0]
 8002dce:	1961      	adds	r1, r4, r5
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	bf01      	itttt	eq
 8002dd4:	6819      	ldreq	r1, [r3, #0]
 8002dd6:	685b      	ldreq	r3, [r3, #4]
 8002dd8:	1949      	addeq	r1, r1, r5
 8002dda:	6021      	streq	r1, [r4, #0]
 8002ddc:	e7ed      	b.n	8002dba <_free_r+0x22>
 8002dde:	461a      	mov	r2, r3
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	b10b      	cbz	r3, 8002de8 <_free_r+0x50>
 8002de4:	42a3      	cmp	r3, r4
 8002de6:	d9fa      	bls.n	8002dde <_free_r+0x46>
 8002de8:	6811      	ldr	r1, [r2, #0]
 8002dea:	1855      	adds	r5, r2, r1
 8002dec:	42a5      	cmp	r5, r4
 8002dee:	d10b      	bne.n	8002e08 <_free_r+0x70>
 8002df0:	6824      	ldr	r4, [r4, #0]
 8002df2:	4421      	add	r1, r4
 8002df4:	1854      	adds	r4, r2, r1
 8002df6:	42a3      	cmp	r3, r4
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	d1e0      	bne.n	8002dbe <_free_r+0x26>
 8002dfc:	681c      	ldr	r4, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	6053      	str	r3, [r2, #4]
 8002e02:	4421      	add	r1, r4
 8002e04:	6011      	str	r1, [r2, #0]
 8002e06:	e7da      	b.n	8002dbe <_free_r+0x26>
 8002e08:	d902      	bls.n	8002e10 <_free_r+0x78>
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	6003      	str	r3, [r0, #0]
 8002e0e:	e7d6      	b.n	8002dbe <_free_r+0x26>
 8002e10:	6825      	ldr	r5, [r4, #0]
 8002e12:	1961      	adds	r1, r4, r5
 8002e14:	428b      	cmp	r3, r1
 8002e16:	bf04      	itt	eq
 8002e18:	6819      	ldreq	r1, [r3, #0]
 8002e1a:	685b      	ldreq	r3, [r3, #4]
 8002e1c:	6063      	str	r3, [r4, #4]
 8002e1e:	bf04      	itt	eq
 8002e20:	1949      	addeq	r1, r1, r5
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	6054      	str	r4, [r2, #4]
 8002e26:	e7ca      	b.n	8002dbe <_free_r+0x26>
 8002e28:	b003      	add	sp, #12
 8002e2a:	bd30      	pop	{r4, r5, pc}
 8002e2c:	200000dc 	.word	0x200000dc

08002e30 <sbrk_aligned>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0e      	ldr	r6, [pc, #56]	; (8002e6c <sbrk_aligned+0x3c>)
 8002e34:	460c      	mov	r4, r1
 8002e36:	6831      	ldr	r1, [r6, #0]
 8002e38:	4605      	mov	r5, r0
 8002e3a:	b911      	cbnz	r1, 8002e42 <sbrk_aligned+0x12>
 8002e3c:	f000 f88c 	bl	8002f58 <_sbrk_r>
 8002e40:	6030      	str	r0, [r6, #0]
 8002e42:	4621      	mov	r1, r4
 8002e44:	4628      	mov	r0, r5
 8002e46:	f000 f887 	bl	8002f58 <_sbrk_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	d00a      	beq.n	8002e64 <sbrk_aligned+0x34>
 8002e4e:	1cc4      	adds	r4, r0, #3
 8002e50:	f024 0403 	bic.w	r4, r4, #3
 8002e54:	42a0      	cmp	r0, r4
 8002e56:	d007      	beq.n	8002e68 <sbrk_aligned+0x38>
 8002e58:	1a21      	subs	r1, r4, r0
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 f87c 	bl	8002f58 <_sbrk_r>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d101      	bne.n	8002e68 <sbrk_aligned+0x38>
 8002e64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e68:	4620      	mov	r0, r4
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	200000e0 	.word	0x200000e0

08002e70 <_malloc_r>:
 8002e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	1ccd      	adds	r5, r1, #3
 8002e76:	f025 0503 	bic.w	r5, r5, #3
 8002e7a:	3508      	adds	r5, #8
 8002e7c:	2d0c      	cmp	r5, #12
 8002e7e:	bf38      	it	cc
 8002e80:	250c      	movcc	r5, #12
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	4607      	mov	r7, r0
 8002e86:	db01      	blt.n	8002e8c <_malloc_r+0x1c>
 8002e88:	42a9      	cmp	r1, r5
 8002e8a:	d905      	bls.n	8002e98 <_malloc_r+0x28>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	2600      	movs	r6, #0
 8002e92:	4630      	mov	r0, r6
 8002e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e98:	4e2e      	ldr	r6, [pc, #184]	; (8002f54 <_malloc_r+0xe4>)
 8002e9a:	f000 f94b 	bl	8003134 <__malloc_lock>
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	bb34      	cbnz	r4, 8002ef2 <_malloc_r+0x82>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	f7ff ffc2 	bl	8002e30 <sbrk_aligned>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	4604      	mov	r4, r0
 8002eb0:	d14d      	bne.n	8002f4e <_malloc_r+0xde>
 8002eb2:	6834      	ldr	r4, [r6, #0]
 8002eb4:	4626      	mov	r6, r4
 8002eb6:	2e00      	cmp	r6, #0
 8002eb8:	d140      	bne.n	8002f3c <_malloc_r+0xcc>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	eb04 0803 	add.w	r8, r4, r3
 8002ec4:	f000 f848 	bl	8002f58 <_sbrk_r>
 8002ec8:	4580      	cmp	r8, r0
 8002eca:	d13a      	bne.n	8002f42 <_malloc_r+0xd2>
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	3503      	adds	r5, #3
 8002ed0:	1a6d      	subs	r5, r5, r1
 8002ed2:	f025 0503 	bic.w	r5, r5, #3
 8002ed6:	3508      	adds	r5, #8
 8002ed8:	2d0c      	cmp	r5, #12
 8002eda:	bf38      	it	cc
 8002edc:	250c      	movcc	r5, #12
 8002ede:	4629      	mov	r1, r5
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	f7ff ffa5 	bl	8002e30 <sbrk_aligned>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d02b      	beq.n	8002f42 <_malloc_r+0xd2>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	442b      	add	r3, r5
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	e00e      	b.n	8002f10 <_malloc_r+0xa0>
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	1b52      	subs	r2, r2, r5
 8002ef6:	d41e      	bmi.n	8002f36 <_malloc_r+0xc6>
 8002ef8:	2a0b      	cmp	r2, #11
 8002efa:	d916      	bls.n	8002f2a <_malloc_r+0xba>
 8002efc:	1961      	adds	r1, r4, r5
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	6025      	str	r5, [r4, #0]
 8002f02:	bf18      	it	ne
 8002f04:	6059      	strne	r1, [r3, #4]
 8002f06:	6863      	ldr	r3, [r4, #4]
 8002f08:	bf08      	it	eq
 8002f0a:	6031      	streq	r1, [r6, #0]
 8002f0c:	5162      	str	r2, [r4, r5]
 8002f0e:	604b      	str	r3, [r1, #4]
 8002f10:	4638      	mov	r0, r7
 8002f12:	f104 060b 	add.w	r6, r4, #11
 8002f16:	f000 f913 	bl	8003140 <__malloc_unlock>
 8002f1a:	f026 0607 	bic.w	r6, r6, #7
 8002f1e:	1d23      	adds	r3, r4, #4
 8002f20:	1af2      	subs	r2, r6, r3
 8002f22:	d0b6      	beq.n	8002e92 <_malloc_r+0x22>
 8002f24:	1b9b      	subs	r3, r3, r6
 8002f26:	50a3      	str	r3, [r4, r2]
 8002f28:	e7b3      	b.n	8002e92 <_malloc_r+0x22>
 8002f2a:	6862      	ldr	r2, [r4, #4]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	bf0c      	ite	eq
 8002f30:	6032      	streq	r2, [r6, #0]
 8002f32:	605a      	strne	r2, [r3, #4]
 8002f34:	e7ec      	b.n	8002f10 <_malloc_r+0xa0>
 8002f36:	4623      	mov	r3, r4
 8002f38:	6864      	ldr	r4, [r4, #4]
 8002f3a:	e7b2      	b.n	8002ea2 <_malloc_r+0x32>
 8002f3c:	4634      	mov	r4, r6
 8002f3e:	6876      	ldr	r6, [r6, #4]
 8002f40:	e7b9      	b.n	8002eb6 <_malloc_r+0x46>
 8002f42:	230c      	movs	r3, #12
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4638      	mov	r0, r7
 8002f48:	f000 f8fa 	bl	8003140 <__malloc_unlock>
 8002f4c:	e7a1      	b.n	8002e92 <_malloc_r+0x22>
 8002f4e:	6025      	str	r5, [r4, #0]
 8002f50:	e7de      	b.n	8002f10 <_malloc_r+0xa0>
 8002f52:	bf00      	nop
 8002f54:	200000dc 	.word	0x200000dc

08002f58 <_sbrk_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4d06      	ldr	r5, [pc, #24]	; (8002f74 <_sbrk_r+0x1c>)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4604      	mov	r4, r0
 8002f60:	4608      	mov	r0, r1
 8002f62:	602b      	str	r3, [r5, #0]
 8002f64:	f7fd fe04 	bl	8000b70 <_sbrk>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_sbrk_r+0x1a>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_sbrk_r+0x1a>
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	200000e4 	.word	0x200000e4

08002f78 <_raise_r>:
 8002f78:	291f      	cmp	r1, #31
 8002f7a:	b538      	push	{r3, r4, r5, lr}
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	460d      	mov	r5, r1
 8002f80:	d904      	bls.n	8002f8c <_raise_r+0x14>
 8002f82:	2316      	movs	r3, #22
 8002f84:	6003      	str	r3, [r0, #0]
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f8e:	b112      	cbz	r2, 8002f96 <_raise_r+0x1e>
 8002f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002f94:	b94b      	cbnz	r3, 8002faa <_raise_r+0x32>
 8002f96:	4620      	mov	r0, r4
 8002f98:	f000 f830 	bl	8002ffc <_getpid_r>
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa6:	f000 b817 	b.w	8002fd8 <_kill_r>
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00a      	beq.n	8002fc4 <_raise_r+0x4c>
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	d103      	bne.n	8002fba <_raise_r+0x42>
 8002fb2:	2316      	movs	r3, #22
 8002fb4:	6003      	str	r3, [r0, #0]
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e7e7      	b.n	8002f8a <_raise_r+0x12>
 8002fba:	2400      	movs	r4, #0
 8002fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	4798      	blx	r3
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e7e0      	b.n	8002f8a <_raise_r+0x12>

08002fc8 <raise>:
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <raise+0xc>)
 8002fca:	4601      	mov	r1, r0
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	f7ff bfd3 	b.w	8002f78 <_raise_r>
 8002fd2:	bf00      	nop
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <_kill_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4d07      	ldr	r5, [pc, #28]	; (8002ff8 <_kill_r+0x20>)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	602b      	str	r3, [r5, #0]
 8002fe6:	f7fd fd3b 	bl	8000a60 <_kill>
 8002fea:	1c43      	adds	r3, r0, #1
 8002fec:	d102      	bne.n	8002ff4 <_kill_r+0x1c>
 8002fee:	682b      	ldr	r3, [r5, #0]
 8002ff0:	b103      	cbz	r3, 8002ff4 <_kill_r+0x1c>
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	bd38      	pop	{r3, r4, r5, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200000e4 	.word	0x200000e4

08002ffc <_getpid_r>:
 8002ffc:	f7fd bd28 	b.w	8000a50 <_getpid>

08003000 <__sread>:
 8003000:	b510      	push	{r4, lr}
 8003002:	460c      	mov	r4, r1
 8003004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003008:	f000 f8a0 	bl	800314c <_read_r>
 800300c:	2800      	cmp	r0, #0
 800300e:	bfab      	itete	ge
 8003010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003012:	89a3      	ldrhlt	r3, [r4, #12]
 8003014:	181b      	addge	r3, r3, r0
 8003016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800301a:	bfac      	ite	ge
 800301c:	6563      	strge	r3, [r4, #84]	; 0x54
 800301e:	81a3      	strhlt	r3, [r4, #12]
 8003020:	bd10      	pop	{r4, pc}

08003022 <__swrite>:
 8003022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003026:	461f      	mov	r7, r3
 8003028:	898b      	ldrh	r3, [r1, #12]
 800302a:	05db      	lsls	r3, r3, #23
 800302c:	4605      	mov	r5, r0
 800302e:	460c      	mov	r4, r1
 8003030:	4616      	mov	r6, r2
 8003032:	d505      	bpl.n	8003040 <__swrite+0x1e>
 8003034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003038:	2302      	movs	r3, #2
 800303a:	2200      	movs	r2, #0
 800303c:	f000 f868 	bl	8003110 <_lseek_r>
 8003040:	89a3      	ldrh	r3, [r4, #12]
 8003042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800304a:	81a3      	strh	r3, [r4, #12]
 800304c:	4632      	mov	r2, r6
 800304e:	463b      	mov	r3, r7
 8003050:	4628      	mov	r0, r5
 8003052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	f000 b817 	b.w	8003088 <_write_r>

0800305a <__sseek>:
 800305a:	b510      	push	{r4, lr}
 800305c:	460c      	mov	r4, r1
 800305e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003062:	f000 f855 	bl	8003110 <_lseek_r>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	89a3      	ldrh	r3, [r4, #12]
 800306a:	bf15      	itete	ne
 800306c:	6560      	strne	r0, [r4, #84]	; 0x54
 800306e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003076:	81a3      	strheq	r3, [r4, #12]
 8003078:	bf18      	it	ne
 800307a:	81a3      	strhne	r3, [r4, #12]
 800307c:	bd10      	pop	{r4, pc}

0800307e <__sclose>:
 800307e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003082:	f000 b813 	b.w	80030ac <_close_r>
	...

08003088 <_write_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	; (80030a8 <_write_r+0x20>)
 800308c:	4604      	mov	r4, r0
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7fd fd19 	bl	8000ace <_write>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_write_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_write_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200000e4 	.word	0x200000e4

080030ac <_close_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d06      	ldr	r5, [pc, #24]	; (80030c8 <_close_r+0x1c>)
 80030b0:	2300      	movs	r3, #0
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	f7fd fd25 	bl	8000b06 <_close>
 80030bc:	1c43      	adds	r3, r0, #1
 80030be:	d102      	bne.n	80030c6 <_close_r+0x1a>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	b103      	cbz	r3, 80030c6 <_close_r+0x1a>
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
 80030c8:	200000e4 	.word	0x200000e4

080030cc <_fstat_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4d07      	ldr	r5, [pc, #28]	; (80030ec <_fstat_r+0x20>)
 80030d0:	2300      	movs	r3, #0
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	602b      	str	r3, [r5, #0]
 80030da:	f7fd fd20 	bl	8000b1e <_fstat>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	d102      	bne.n	80030e8 <_fstat_r+0x1c>
 80030e2:	682b      	ldr	r3, [r5, #0]
 80030e4:	b103      	cbz	r3, 80030e8 <_fstat_r+0x1c>
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	bd38      	pop	{r3, r4, r5, pc}
 80030ea:	bf00      	nop
 80030ec:	200000e4 	.word	0x200000e4

080030f0 <_isatty_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d06      	ldr	r5, [pc, #24]	; (800310c <_isatty_r+0x1c>)
 80030f4:	2300      	movs	r3, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	602b      	str	r3, [r5, #0]
 80030fc:	f7fd fd1f 	bl	8000b3e <_isatty>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_isatty_r+0x1a>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_isatty_r+0x1a>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	200000e4 	.word	0x200000e4

08003110 <_lseek_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4d07      	ldr	r5, [pc, #28]	; (8003130 <_lseek_r+0x20>)
 8003114:	4604      	mov	r4, r0
 8003116:	4608      	mov	r0, r1
 8003118:	4611      	mov	r1, r2
 800311a:	2200      	movs	r2, #0
 800311c:	602a      	str	r2, [r5, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f7fd fd18 	bl	8000b54 <_lseek>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_lseek_r+0x1e>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_lseek_r+0x1e>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	200000e4 	.word	0x200000e4

08003134 <__malloc_lock>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__malloc_lock+0x8>)
 8003136:	f7ff bdc7 	b.w	8002cc8 <__retarget_lock_acquire_recursive>
 800313a:	bf00      	nop
 800313c:	200000d8 	.word	0x200000d8

08003140 <__malloc_unlock>:
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <__malloc_unlock+0x8>)
 8003142:	f7ff bdc2 	b.w	8002cca <__retarget_lock_release_recursive>
 8003146:	bf00      	nop
 8003148:	200000d8 	.word	0x200000d8

0800314c <_read_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4d07      	ldr	r5, [pc, #28]	; (800316c <_read_r+0x20>)
 8003150:	4604      	mov	r4, r0
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	2200      	movs	r2, #0
 8003158:	602a      	str	r2, [r5, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f7fd fc9a 	bl	8000a94 <_read>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_read_r+0x1e>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_read_r+0x1e>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	200000e4 	.word	0x200000e4

08003170 <_init>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr

0800317c <_fini>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr
